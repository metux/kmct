import yaml
from util import dict_merge, dict_keys, fmt_val
import log

class Generator:
    def __init__(self, config):
        self.config = config
        self.enabled_features = {}
        self.processed = False

    """collect all features that are enabled"""
    def collect_enabled_features(self):
        self.collect_enabled_feature_list(self.config.get_feature_enable())

    def enable_feature(self, fname):
        f = self.config.get_feature(fname)
        if f is None:
            log.err("missing feature: %s" % fname)
            return 0

        if fname in self.enabled_features:
            return 0

        self.enabled_features[fname] = f
        return self.collect_enabled_feature_list(f.get_feature_enable()) + 1

    """collect all explicitly enabled features"""
    def collect_enabled_feature_list(self, fl):
        ret = 0
        for fname in fl:
            ret += self.enable_feature(fname)
        return ret

    """check whether all features in list are enabled"""
    def check_features_enabled(self, feature_names):
        for fn in feature_names:
            if fn not in self.enabled_features:
                return False
        return True

    def process_rule(self, rule):
        if 'on-feature' in rule.cf:
            if self.check_features_enabled(rule.get_on_feature()):
                return self.collect_enabled_feature_list(rule.get_feature_enable())
            return 0

        raise Exception("rule missing match statement (on-feature)")

    def process_rules(self):
        ret = 0
        for rule in self.config.get_all_rules():
            ret += self.process_rule(rule)
        if (ret > 0):
            self.process_rules()

    def updateconf(self):
        log.info("updating config")

        self.collect_enabled_features()
        self.process_rules()

        self.kconf_enable  = self.config.get_kconf_enable()
        self.kconf_module  = self.config.get_kconf_module()
        self.kconf_setting = self.config.get_kconf_setting()

        self.allsym = self.config.get_kconf_all()

        # process enabled feature list
        for fname, fobj in self.enabled_features.iteritems():
            self.kconf_enable  |= fobj.get_kconf_enable()
            self.kconf_module  |= fobj.get_kconf_module()
            dict_merge(self.kconf_setting, fobj.get_kconf_setting())

        for x in self.kconf_enable.intersection(self.kconf_module):
            log.info("module forced builtin: %s: " % x)
            self.kconf_module.remove(x)

        self.kconf_unset = (self.allsym - self.kconf_enable
                                        - self.kconf_module
                                        - dict_keys(self.kconf_setting))

        self.processed = True

    def render_cf(self):
        if not self.processed:
            self.updateconf()

        out = "# autogenerated by kmct\n"
        for sym in self.kconf_enable:
            out += ("CONFIG_%s=y\n" % sym)
        for sym in self.kconf_module:
            out += ("CONFIG_%s=m\n" % sym)
        for sym, val in self.kconf_setting.iteritems():
            out += ("CONFIG_%s=%s\n" % (sym, fmt_val(val)))
        for sym in self.kconf_unset:
            out += ("# CONFIG_%s is not set\n" % sym)
        return out
